/**
 * @file ValueUniverse
 * @author Sunil Pratap Singh (sunilp896@gmail.com)
 * @brief 
 * @version 0.1
 * @date 2020-06-15
 * 
 * @copyright Copyright (c) 2020
 * 
 */
#ifndef _A_VALUSE_UNIVERSE_H_
#define _A_VALUSE_UNIVERSE_H_
#include <iterator>
#include <vector>
#include <type_traits>
#include "llvm/IR/Value.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/InstIterator.h"
#include "llvm/IR/CallSite.h"
#include "llvm/Support/raw_ostream.h"

namespace A{
    /**
     * @brief 
     *  An implementation of the domain that'll be used in bounded set
     * @tparam T 
     */
    template<typename T>
    class ValueUniverse{
    public:
        ValueUniverse(llvm::Function*);
        ValueUniverse(std::vector<T> e);

        int Size();
        std::vector<T> ToArray();

        typename std::vector<T>::iterator begin(){	return elements.begin();}
        typename std::vector<T>::iterator end(){	return elements.end();}

    private:
        std::vector<T> elements;
    };
 
template<typename T>
ValueUniverse<T>::ValueUniverse(std::vector<T> e){
    this->elements = e;
}

template<typename T>
inline int ValueUniverse<T>::Size(){
    return elements.size();
}

template<typename T>
inline std::vector<T> ValueUniverse<T>::ToArray(){
    return elements;
}
}

#endif
