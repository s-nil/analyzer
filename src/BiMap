/**
 * @file BiMap
 * @author Sunil Singh (sunilp896@gmail.com)
 * @brief 
 * @version 0.1
 * @date 2020-01-21
 * 
 * @copyright Copyright (c) 2020
 * 
 */
#ifndef _A_OBJECT_INT_MAPPER_H_
#define _A_OBJECT_INT_MAPPER_H_
#include <vector>
#include "llvm/ADT/DenseMap.h"
#include "llvm/Support/raw_ostream.h"
#include "ValueUniverse"
#include "llvm/IR/Value.h"
#include <map>

namespace A
{
    /**
     * @brief 
     * 
     * @tparam T 
     */
    template<typename T>
    class BiMap{
    public:
        BiMap(){
            intToObject = std::vector<T>();
            objectToInt = std::map<T,int>();
            counter = 0;
        }
        
        BiMap(ValueUniverse<T>& values){
            intToObject = std::vector<T>();
            objectToInt = std::map<T,int>();
            counter = 0;

            for(auto I = values.begin(), IE = values.end(); I != IE; ++I){
                Add(*I);
            }
            
        }
        ~BiMap(){}

        int Add(T obj);
        int GetInt(T obj);
        T GetObject(int idx);
        bool Contains(T obj);
        int Size();

        bool operator==(BiMap<T> rhs);
        bool operator!=(BiMap<T> rhs); 
    private:
        std::vector<T> intToObject;
        int counter;
        // llvm::DenseMap<T,int> objectToInt; 
        std::map<T,int> objectToInt;
    };    
 
template<typename T>
int BiMap<T>::Add(T obj){
    objectToInt[obj] = ++counter;
    intToObject.push_back(obj);
    return counter;
}

template<typename T>
int A::BiMap<T>::GetInt(T obj){
    int i = objectToInt[obj];
    if(i != 0)
        return i-1;

    return Add(obj)-1;
}

template<typename T>
inline T A::BiMap<T>::GetObject(int idx){
    return intToObject[idx];
}

template<typename T>
inline bool A::BiMap<T>::Contains(T obj){
    if(objectToInt.find(obj) != objectToInt.end())
        return 1;
    return 0;
}

template<typename T>
inline int A::BiMap<T>::Size(){
    return counter;
}

template<typename T>
inline bool A::BiMap<T>::operator==(A::BiMap<T> rhs){
    return intToObject == rhs.intToObject && counter == rhs.counter && objectToInt == rhs.objectToInt;
}

template<typename T>
inline bool A::BiMap<T>::operator!=(A::BiMap<T> rhs){
    return !operator==(rhs);
}
}

#endif
