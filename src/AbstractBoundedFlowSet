/**
 * @file AbstractBoundedFlowSet
 * @author Sunil Singh (sunilp896@gmail.com)
 * @brief 
 * @version 0.1
 * @date 2020-01-22
 * 
 * @copyright Copyright (c) 2020
 * 
 */
#ifndef _A_ABSTRACT_BOUNDED_FLOW_SET_H_
#define _A_ABSTRACT_BOUNDED_FLOW_SET_H_
#include "BoundedFlowSet"
#include "AbstractFlowSet"

namespace A
{
    /**
     * @brief 
     * 
     * @tparam T 
     */
    template<class T>
    class AbstractBoundedFlowSet : public BoundedFlowSet<T> , public AbstractFlowSet<T>
    {
    public:
        // AbstractBoundedFlowSet(){}

	    void Complement(ISet<T>* dest);
    };

    template<class T>
    void AbstractBoundedFlowSet<T>::Complement(ISet<T>* destFlow){
	    ArrayPackedSet<T>* tmp = dynamic_cast<ArrayPackedSet<T>*>(this->Clone());
        ArraySparseSet<T>* dest = dynamic_cast<ArraySparseSet<T>*>(destFlow);
        dest->Clear();
        tmp->Complement();

        for(auto i : *tmp){
            dest->Add(i);
        }
    }
}

#endif