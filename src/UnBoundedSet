/**
 * @file UnBoundedSet
 * @author your name (you@domain.com)
 * @brief 
 * @version 0.1
 * @date 2020-06-15
 * 
 * @copyright Copyright (c) 2020
 * 
 */
#ifndef _A_ARRAY_SPARSE_SET_H_
#define _A_ARRAY_SPARSE_SET_H_
#include "AbSet"
#include "ValueUniverse"
#include <algorithm>
#include <set>
#include <vector>

namespace A{
    template<typename T>
    class UnBoundedSet : public AbSet<T>{
    public:
        UnBoundedSet(){
            elements = std::set<T>();
        }
        UnBoundedSet(const UnBoundedSet& obj){
            elements = obj.elements;
        }
        UnBoundedSet(llvm::Function* F);
        ~UnBoundedSet(){}

        UnBoundedSet<T>* Clone() override;
        UnBoundedSet<T>* EmptySet() override;
        void Copy(ISet<T>* dest) override;
        void Clear() override;
        void Union(ISet<T>* other) override;
        void Union(ISet<T>* other, ISet<T>* dest) override;
        void Intersection(ISet<T>* other) override;
        void Intersection(ISet<T>* other, ISet<T>* dest) override;
        void Difference(ISet<T>* other) override;
        void Difference(ISet<T>* other, ISet<T>* dest) override;
        bool IsEmpty() override;
        int Size() override;
        void Add(T obj) override;
        void Add(T obj, ISet<T>* dest) override;
        void Remove(T obj) override;
        void Remove(T obj, ISet<T>* dest) override;
        bool Contains(T obj) override;
        bool operator==(ISet<T>* other) override;
        bool operator!=(ISet<T>* other) override {return !(*this == other);}
        bool IsSubSet(ISet<T>* other) override;
        std::vector<T> ToList() override;

        typename std::set<T>::iterator begin(){
            return elements.begin();
        }
        typename std::set<T>::iterator end(){
            return elements.end();
        }


    private:
        std::set<T> elements;
        inline UnBoundedSet(const UnBoundedSet<T>* ref);
        bool SameType(A::ISet<T>* o);
    };    

template<typename T>
UnBoundedSet<T>::UnBoundedSet(const UnBoundedSet<T>* ref){
    this->elements = ref->elements;
}

template<typename T>
UnBoundedSet<T>::UnBoundedSet(llvm::Function* F){
    auto universe = ValueUniverse<T>(F);
    auto ele = universe.ToArray();
    this->elements = std::set<T>(ele.begin(),ele.end());
}

template<typename T>
UnBoundedSet<T>* UnBoundedSet<T>::Clone(){
    return new UnBoundedSet<T>(this);
}

template<typename T>
UnBoundedSet<T>* UnBoundedSet<T>::EmptySet(){
    return new UnBoundedSet<T>();
}

template<typename T>
void UnBoundedSet<T>::Copy(ISet<T>* dest){
    if(dest == this){
        return;
    }else{
        if(SameType(dest)){
            UnBoundedSet<T> *tmp = dynamic_cast<UnBoundedSet<T>*>(dest);
            tmp->elements = this->elements;
        }else{
            AbSet<T>::Copy(dest);
        }
    }
}

template<typename T>
void UnBoundedSet<T>::Clear(){
    this->elements.clear();
}

template<typename T>
void UnBoundedSet<T>::Union(ISet<T>* other){
    if(this == other){
        return;
    }else{
        if(SameType(other))
            Union(other,this);
        else
            AbSet<T>::Union(other);
    }
}

template<typename T>
void UnBoundedSet<T>::Union(ISet<T>* otherFlow, ISet<T>* destFlow){
    if(SameType(otherFlow) && SameType(destFlow)){
        UnBoundedSet<T>* other = dynamic_cast<UnBoundedSet<T>*>(otherFlow);
        UnBoundedSet<T>* dest = dynamic_cast<UnBoundedSet<T>*>(destFlow);

        if(this == other || *this == other){
            Copy(dest);
            return;
        }

        UnBoundedSet<T> tmp;
        std::set_union(elements.begin(),elements.end(),
                        other->elements.begin(),other->elements.end(),
                        std::inserter(tmp.elements,tmp.elements.begin()));
        tmp.Copy(dest);
    }else{
        this->AbSet<T>::Union(otherFlow,destFlow);
    }
}

template<typename T>
void UnBoundedSet<T>::Intersection(ISet<T>* other){
    if(this == other){
        return;
    }else{
        if(SameType(other))
            Intersection(other,this);
        else
            AbSet<T>::Intersection(other);
    }
}

template<typename T>
void UnBoundedSet<T>::Intersection(ISet<T>* otherFlow, ISet<T>* destFlow){
    if(SameType(otherFlow) && SameType(destFlow)){
        UnBoundedSet<T>* other = dynamic_cast<UnBoundedSet<T>*>(otherFlow);
        UnBoundedSet<T>* dest = dynamic_cast<UnBoundedSet<T>*>(destFlow);

        if(this == other || *this == other){
            Copy(dest);
            return;
        }

        UnBoundedSet<T> tmp;
        std::set_intersection(elements.begin(),elements.end(),
                        other->elements.begin(),other->elements.end(),
                        std::inserter(tmp.elements,tmp.elements.begin()));
        tmp.Copy(dest);
    }else{
        AbSet<T>::Intersection(otherFlow,destFlow);
    }
}

template<typename T>
void UnBoundedSet<T>::Difference(ISet<T>* other){
    if(this == other){
        return;
    }else{
        if(SameType(other))
            Difference(other,this);
        else
            AbSet<T>::Difference(other);
    }
}

template<typename T>
void UnBoundedSet<T>::Difference(ISet<T>* otherFlow, ISet<T>* destFlow){
    if(SameType(otherFlow) && SameType(destFlow)){
        UnBoundedSet<T>* other = dynamic_cast<UnBoundedSet<T>*>(otherFlow);
        UnBoundedSet<T>* dest = dynamic_cast<UnBoundedSet<T>*>(destFlow);

        if(this == other || *this == other){
            dest->Clear();
            return;
        }

        UnBoundedSet<T> tmp;
        std::set_difference(elements.begin(),elements.end(),
                        other->elements.begin(),other->elements.end(),
                        std::inserter(tmp.elements,tmp.elements.begin()));
        tmp.Copy(dest);
    }else{
        AbSet<T>::Difference(otherFlow,destFlow);
    }
}

template<typename T>
bool UnBoundedSet<T>::IsEmpty(){
    return elements.empty();
}

template<typename T>
int UnBoundedSet<T>::Size(){
    return elements.size();
}

template<typename T>
void UnBoundedSet<T>::Add(T obj){
    if(!Contains(obj)){
        elements.insert(obj);
    }
}

template<typename T>
void UnBoundedSet<T>::Add(T obj, ISet<T>* dest){
    auto tmp = this->Clone();
    tmp->Add(obj);
    /// copy tmp to dest
    tmp->Copy(dest);
}

template<typename T>
void UnBoundedSet<T>::Remove(T obj){
    elements.erase(obj);
}

template<typename T>
void UnBoundedSet<T>::Remove(T obj, ISet<T>* dest){
    auto tmp = this->Clone();
    tmp->Remove(obj);
    /// copy tmp to dest
    tmp->Copy(dest);
}

template<typename T>
bool A::UnBoundedSet<T>::Contains(T obj){
    if(elements.find(obj) != elements.end())
        return true;
    return false;
}

template<typename T>
bool UnBoundedSet<T>::operator==(ISet<T>* otherFlow){
    if(SameType(otherFlow)){
        UnBoundedSet<T> *flow = dynamic_cast<UnBoundedSet<T>*>(otherFlow);
        return elements == flow->elements;
    }else{
        return AbSet<T>::operator==(otherFlow);
    }
}

template<typename T>
bool UnBoundedSet<T>::IsSubSet(ISet<T>* otherFlow){
    if(SameType(otherFlow)){
        UnBoundedSet<T>* other = dynamic_cast<UnBoundedSet<T>*>(otherFlow);
        return std::includes(elements.begin(),elements.end(),other->elements.begin(),other->elements.end());
    }else{
        return AbSet<T>::IsSubSet(otherFlow);
    }
}

template<typename T>
std::vector<T> UnBoundedSet<T>::ToList(){
    std::vector<T> objects(elements.begin(),elements.end());
    return objects;
}

template<typename T>
bool UnBoundedSet<T>::SameType(ISet<T>* o){
    if(dynamic_cast<UnBoundedSet<T>*>(o) != nullptr)
        return true;
    return false;
}
}   //  namespace

#endif
